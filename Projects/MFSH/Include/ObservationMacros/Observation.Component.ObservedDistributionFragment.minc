/*
  ObservedDistribution Fragment
  Fragment that adds 'Observed Distribution' components to Observation.
*/


#Fragment: Observation.Component.ObservedDistributionFragment
#Parent: Observation
#Title: "Observed Distribution Fragment"
#Description: """
#  Fragment that adds 'Observed Distribution' components to Observation.
#  """
  #incompatible Observation.Component.Zero
  #
  // define calcification distribution slice
  #apply Observation.Component.Add("obsDistribution", "0..*", "Observed Distribution", "Observed distribution of abnormalities",
  #	 """
  #  This slice contains the optional components that describe the distribution of
  #  a group of abnormalities.
  #  The value of this component is a codeable concept chosen from the 
  #  CalcificationDistributionVS valueset.
  #	 """,
  #  "ObservationComponentSliceCodesCS#obsDistribution")
  #
  #apply Observation.Component.SetConcept("obsDistribution", "1..1", "CalcificationDistributionVS")
  #
  // Define distribution region size.
  #apply Observation.Component.Add("obsDistRegionSize", "0..1", "Observed Distribution Region Size", "Observed size of distribution region.",
  #	 """
  #  This component slice contains the size of an region inside of which there 
  #  is a distribution of abnormalities. This is not the size of one specific distinct abnormality, but is the size of
  #  the region in which a one or more abnormalities are found.
  #  
  #  There may be one, two, or three values indicating a size of
  #  one dimension (length), two dimensions (area), or three dimensions (volume).
  #  
  #  Each dimension can be a quantity (i.e. 5), or a range (1 to 5).
  #  
  #  If the lower bound of the range is set but not the upper bound, 
  #  then the size is {lower bound} or greater.
  #  
  #  If the upper bound of the range is set but not the lower bound, 
  #  
  #  then the size is {upper bound} or less.
  #	  """,
  #  "ObservationComponentSliceCodesCS#obsDistRegionSize")
  #

* component[obsDistRegionSize].value[x] 1..1
* component[obsDistRegionSize].value[x] only Quantity or Range
* component[obsDistRegionSize].valueQuantity from UNITSOFLENGTH
* component[obsDistRegionSize].valueRange.low from UNITSOFLENGTH
* component[obsDistRegionSize].valueRange.high from UNITSOFLENGTH

  #// -----------------------------------------
  #// Graph Macros
  #// -----------------------------------------
  #use Graph
    #apply once NodeFragment("%FTitle%")
    #apply LinkByName("frag", "^%FragmentId%/$", "^%ProfileId%/$", "1", "Cmp")
  #end
  
  #// -----------------------------------------
  #// IG Macros
  #// -----------------------------------------
  #use IG
    #apply once IntroDocFragment("""
    # <p>
    # <b>%FTitle%</b>
    # </p>
    #""")

    #apply once GroupMemberFragment("Fragments", "%FTitle%")
  #end
  

  #// -----------------------------------------
  #// Code API Macros
  #// -----------------------------------------
  #use ApiBuild
    #apply once DefineFragment()
    #apply ImplementFragment()
  #end
#end
